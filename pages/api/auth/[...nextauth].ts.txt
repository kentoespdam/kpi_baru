import NextAuth, { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import axios from "axios";
import { NextApiHandler } from "next";

export const nextOptions: NextAuthOptions = {
	secret: process.env.NEXT_AUTH_SECRET,
	providers: [
		CredentialsProvider({
			name: "Credentials",
			credentials: {
				username: {
					label: "Username",
					type: "text",
					value: "850900341",
					placeholder: "nipam",
				},
				password: {
					label: "Password",
					type: "password",
					value: "1234",
				},
			},
			async authorize(credentials) {
				let employee;
				if (
					credentials?.username === undefined ||
					credentials?.password === undefined
				)
					return null;

				return axios
					.post(`${process.env.HOST}/api/employee`, {
						nipam: credentials?.username,
					})
					.then((response) => {
						console.log(response);
						if (response.status !== 200)
							throw new Error(JSON.stringify(response));
						if (credentials.password !== "1234")
							throw new Error("Username / Password salah");
						return response.data;
					})
					.catch((err) => {
						console.log(err);
						return null;
					});
			},
		}),
	],
	session: {
		strategy: "jwt",
		maxAge: 60, // 1 minute
		// maxAge: 60 * 60 * 24 * 7, // 7 days
	},
	callbacks: {
		async jwt({ token, user }) {
			if (user) {
				console.log("with user");
				return {
					...token,
					user: user,
				};
				// return { ...token, user: user };
			}
			console.log("token", token);
			return token;
		},
		async session({ session, token }) {
			console.log("regenereate session");
			// console.log(token);
			if (token) {
				console.log("with token");
				// console.log(token);
				return {
					...session,
					user: token.user,
				};
			}

			return session;
		},
	},
	debug: true,
};

const AuthHandler: NextApiHandler = async (req, res) => {
	return await NextAuth(req, res, nextOptions);
};

export default AuthHandler;
